#!/usr/bin/env python3


import sys
import os
import argparse
import asyncio
import logging
from pathlib import Path
from collections import defaultdict

import uvloop

from nodes import init_hosts
from services import init_services

from writer import init_output_workers, run_output_worker
from suzieq.utils import load_sq_config


def validate_parquet_args(cfg, output_args, logger):
    """Validate user arguments for parquet output"""

    if not cfg.get("data-directory", None):
        output_dir = "/tmp/suzieq/parquet-out/"
        logger.warning(
            "No output directory for parquet specified, using" "/tmp/suzieq/parquet-out"
        )
    else:
        output_dir = cfg["data-directory"]

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    if not os.path.isdir(output_dir):
        logger.error(
            "Output directory {} is not a directory".format(output_dir))
        print("Output directory {} is not a directory".format(output_dir))
        sys.exit(1)

    logger.info("Parquet outputs will be under {}".format(output_dir))
    output_args.update({"output_dir": output_dir})

    return


async def start_poller(userargs, cfg):

    logger = logging.getLogger('sq-poller')
    logger.setLevel(cfg.get("logging-level", "INFO").upper())
    fh = logging.FileHandler(cfg.get("log-file", "/tmp/sq-poller.log"))
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s " "- %(message)s"
    )
    fh.setFormatter(formatter)
    fh.setLevel(logging.INFO)
    logger.addHandler(fh)

    if not os.path.exists(cfg["service-directory"]):
        logger.error(
            "Service directory {} is not a directory".format(
                userargs.output_dir)
        )
        print("Service directory {} is not a directory".format(userargs.output_dir))
        sys.exit(1)

    if not cfg.get("schema-directory", None):
        schema_dir = "{}/{}".format(userargs.service_dir, "schema")
    else:
        schema_dir = cfg["schema-directory"]

    output_args = {}

    if "parquet" in userargs.outputs:
        validate_parquet_args(cfg, output_args, logger)

    outputs = init_output_workers(userargs.outputs, output_args)

    queue = asyncio.Queue()

    logger.info("Initializing hosts and services")
    tasks = [
        init_hosts(userargs.devices_file),
        init_services(cfg["service-directory"], schema_dir, queue,
                      userargs.run_once or "forever"),
    ]
    nodes, svcs = await asyncio.gather(*tasks)

    node_callq = defaultdict(lambda: defaultdict(dict))

    node_callq.update({x: {'hostname': nodes[x].hostname,
                           'postq': nodes[x].post_commands}
                       for x in nodes})

    for svc in svcs:
        svc.set_nodes(node_callq)

    logger.info("Suzieq Started")

    if userargs.service_only:
        svclist = userargs.service_only.split(",")
    else:
        svclist = [svc.name for svc in svcs]

    working_svcs = [svc for svc in svcs if svc.name in svclist]
    if len(working_svcs) < 1:
        print(
            f"No correct services specified. Should have been one of {[svc.name for svc in svcs]}")
        sys.exit(1)

    try:
        tasks = [svc.run() for svc in working_svcs]
        tasks += [nodes[node].run() for node in nodes]
        tasks.append(run_output_worker(queue, outputs))
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt. Terminating")
        sys.exit(0)


if __name__ == "__main__":

    homedir = str(Path.home())
    supported_outputs = ["parquet"]

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-D",
        "--devices-file",
        type=str,
        default="{}/{}".format(homedir, "suzieq-devices.yml"),
        help="FIle with URL of devices to observe",
    )
    parser.add_argument(
        "-o",
        "--outputs",
        nargs="+",
        default=["parquet"],
        choices=supported_outputs,
        help="Output formats to write to: parquet. Use "
        "this option multiple times for more than one output",
    )
    parser.add_argument(
        "-s",
        "--service-only",
        type=str,
        help="Only run this comma separated list of services",
    )

    parser.add_argument(
        "--run-once",
        type=str,
        choices=["gather", "process"],
        help=argparse.SUPPRESS,
    )

    userargs = parser.parse_args()
    cfg = load_sq_config()

    uvloop.install()

    asyncio.run(start_poller(userargs, cfg))
